//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g 2012-03-07 22:22:43

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class CMinusLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int T__11=11;
	public const int T__12=12;
	public const int T__13=13;
	public const int T__14=14;
	public const int T__15=15;
	public const int T__16=16;
	public const int T__17=17;
	public const int T__18=18;
	public const int T__19=19;
	public const int T__20=20;
	public const int T__21=21;
	public const int T__22=22;
	public const int T__23=23;
	public const int T__24=24;
	public const int ARG=4;
	public const int FUNC=5;
	public const int ID=6;
	public const int INT=7;
	public const int SLIST=8;
	public const int VAR=9;
	public const int WS=10;

    // delegates
    // delegators

	public CMinusLexer()
	{
		OnCreated();
	}

	public CMinusLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public CMinusLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_T__11();
	partial void LeaveRule_T__11();

	// $ANTLR start "T__11"
	[GrammarRule("T__11")]
	private void mT__11()
	{
		EnterRule_T__11();
		EnterRule("T__11", 1);
		TraceIn("T__11", 1);
		try
		{
			int _type = T__11;
			int _channel = DefaultTokenChannel;
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:7:7: ( '!=' )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:7:9: '!='
			{
			DebugLocation(7, 9);
			Match("!="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__11", 1);
			LeaveRule("T__11", 1);
			LeaveRule_T__11();
		}
	}
	// $ANTLR end "T__11"

	partial void EnterRule_T__12();
	partial void LeaveRule_T__12();

	// $ANTLR start "T__12"
	[GrammarRule("T__12")]
	private void mT__12()
	{
		EnterRule_T__12();
		EnterRule("T__12", 2);
		TraceIn("T__12", 2);
		try
		{
			int _type = T__12;
			int _channel = DefaultTokenChannel;
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:8:7: ( '(' )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:8:9: '('
			{
			DebugLocation(8, 9);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__12", 2);
			LeaveRule("T__12", 2);
			LeaveRule_T__12();
		}
	}
	// $ANTLR end "T__12"

	partial void EnterRule_T__13();
	partial void LeaveRule_T__13();

	// $ANTLR start "T__13"
	[GrammarRule("T__13")]
	private void mT__13()
	{
		EnterRule_T__13();
		EnterRule("T__13", 3);
		TraceIn("T__13", 3);
		try
		{
			int _type = T__13;
			int _channel = DefaultTokenChannel;
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:9:7: ( ')' )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:9:9: ')'
			{
			DebugLocation(9, 9);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__13", 3);
			LeaveRule("T__13", 3);
			LeaveRule_T__13();
		}
	}
	// $ANTLR end "T__13"

	partial void EnterRule_T__14();
	partial void LeaveRule_T__14();

	// $ANTLR start "T__14"
	[GrammarRule("T__14")]
	private void mT__14()
	{
		EnterRule_T__14();
		EnterRule("T__14", 4);
		TraceIn("T__14", 4);
		try
		{
			int _type = T__14;
			int _channel = DefaultTokenChannel;
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:10:7: ( '*' )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:10:9: '*'
			{
			DebugLocation(10, 9);
			Match('*'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__14", 4);
			LeaveRule("T__14", 4);
			LeaveRule_T__14();
		}
	}
	// $ANTLR end "T__14"

	partial void EnterRule_T__15();
	partial void LeaveRule_T__15();

	// $ANTLR start "T__15"
	[GrammarRule("T__15")]
	private void mT__15()
	{
		EnterRule_T__15();
		EnterRule("T__15", 5);
		TraceIn("T__15", 5);
		try
		{
			int _type = T__15;
			int _channel = DefaultTokenChannel;
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:11:7: ( '+' )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:11:9: '+'
			{
			DebugLocation(11, 9);
			Match('+'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__15", 5);
			LeaveRule("T__15", 5);
			LeaveRule_T__15();
		}
	}
	// $ANTLR end "T__15"

	partial void EnterRule_T__16();
	partial void LeaveRule_T__16();

	// $ANTLR start "T__16"
	[GrammarRule("T__16")]
	private void mT__16()
	{
		EnterRule_T__16();
		EnterRule("T__16", 6);
		TraceIn("T__16", 6);
		try
		{
			int _type = T__16;
			int _channel = DefaultTokenChannel;
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:12:7: ( ',' )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:12:9: ','
			{
			DebugLocation(12, 9);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__16", 6);
			LeaveRule("T__16", 6);
			LeaveRule_T__16();
		}
	}
	// $ANTLR end "T__16"

	partial void EnterRule_T__17();
	partial void LeaveRule_T__17();

	// $ANTLR start "T__17"
	[GrammarRule("T__17")]
	private void mT__17()
	{
		EnterRule_T__17();
		EnterRule("T__17", 7);
		TraceIn("T__17", 7);
		try
		{
			int _type = T__17;
			int _channel = DefaultTokenChannel;
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:13:7: ( ';' )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:13:9: ';'
			{
			DebugLocation(13, 9);
			Match(';'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__17", 7);
			LeaveRule("T__17", 7);
			LeaveRule_T__17();
		}
	}
	// $ANTLR end "T__17"

	partial void EnterRule_T__18();
	partial void LeaveRule_T__18();

	// $ANTLR start "T__18"
	[GrammarRule("T__18")]
	private void mT__18()
	{
		EnterRule_T__18();
		EnterRule("T__18", 8);
		TraceIn("T__18", 8);
		try
		{
			int _type = T__18;
			int _channel = DefaultTokenChannel;
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:14:7: ( '=' )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:14:9: '='
			{
			DebugLocation(14, 9);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__18", 8);
			LeaveRule("T__18", 8);
			LeaveRule_T__18();
		}
	}
	// $ANTLR end "T__18"

	partial void EnterRule_T__19();
	partial void LeaveRule_T__19();

	// $ANTLR start "T__19"
	[GrammarRule("T__19")]
	private void mT__19()
	{
		EnterRule_T__19();
		EnterRule("T__19", 9);
		TraceIn("T__19", 9);
		try
		{
			int _type = T__19;
			int _channel = DefaultTokenChannel;
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:15:7: ( '==' )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:15:9: '=='
			{
			DebugLocation(15, 9);
			Match("=="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__19", 9);
			LeaveRule("T__19", 9);
			LeaveRule_T__19();
		}
	}
	// $ANTLR end "T__19"

	partial void EnterRule_T__20();
	partial void LeaveRule_T__20();

	// $ANTLR start "T__20"
	[GrammarRule("T__20")]
	private void mT__20()
	{
		EnterRule_T__20();
		EnterRule("T__20", 10);
		TraceIn("T__20", 10);
		try
		{
			int _type = T__20;
			int _channel = DefaultTokenChannel;
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:16:7: ( 'char' )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:16:9: 'char'
			{
			DebugLocation(16, 9);
			Match("char"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__20", 10);
			LeaveRule("T__20", 10);
			LeaveRule_T__20();
		}
	}
	// $ANTLR end "T__20"

	partial void EnterRule_T__21();
	partial void LeaveRule_T__21();

	// $ANTLR start "T__21"
	[GrammarRule("T__21")]
	private void mT__21()
	{
		EnterRule_T__21();
		EnterRule("T__21", 11);
		TraceIn("T__21", 11);
		try
		{
			int _type = T__21;
			int _channel = DefaultTokenChannel;
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:17:7: ( 'for' )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:17:9: 'for'
			{
			DebugLocation(17, 9);
			Match("for"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__21", 11);
			LeaveRule("T__21", 11);
			LeaveRule_T__21();
		}
	}
	// $ANTLR end "T__21"

	partial void EnterRule_T__22();
	partial void LeaveRule_T__22();

	// $ANTLR start "T__22"
	[GrammarRule("T__22")]
	private void mT__22()
	{
		EnterRule_T__22();
		EnterRule("T__22", 12);
		TraceIn("T__22", 12);
		try
		{
			int _type = T__22;
			int _channel = DefaultTokenChannel;
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:18:7: ( 'int' )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:18:9: 'int'
			{
			DebugLocation(18, 9);
			Match("int"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__22", 12);
			LeaveRule("T__22", 12);
			LeaveRule_T__22();
		}
	}
	// $ANTLR end "T__22"

	partial void EnterRule_T__23();
	partial void LeaveRule_T__23();

	// $ANTLR start "T__23"
	[GrammarRule("T__23")]
	private void mT__23()
	{
		EnterRule_T__23();
		EnterRule("T__23", 13);
		TraceIn("T__23", 13);
		try
		{
			int _type = T__23;
			int _channel = DefaultTokenChannel;
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:19:7: ( '{' )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:19:9: '{'
			{
			DebugLocation(19, 9);
			Match('{'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__23", 13);
			LeaveRule("T__23", 13);
			LeaveRule_T__23();
		}
	}
	// $ANTLR end "T__23"

	partial void EnterRule_T__24();
	partial void LeaveRule_T__24();

	// $ANTLR start "T__24"
	[GrammarRule("T__24")]
	private void mT__24()
	{
		EnterRule_T__24();
		EnterRule("T__24", 14);
		TraceIn("T__24", 14);
		try
		{
			int _type = T__24;
			int _channel = DefaultTokenChannel;
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:20:7: ( '}' )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:20:9: '}'
			{
			DebugLocation(20, 9);
			Match('}'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__24", 14);
			LeaveRule("T__24", 14);
			LeaveRule_T__24();
		}
	}
	// $ANTLR end "T__24"

	partial void EnterRule_ID();
	partial void LeaveRule_ID();

	// $ANTLR start "ID"
	[GrammarRule("ID")]
	private void mID()
	{
		EnterRule_ID();
		EnterRule("ID", 15);
		TraceIn("ID", 15);
		try
		{
			int _type = ID;
			int _channel = DefaultTokenChannel;
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:84:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:84:9: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
			{
			DebugLocation(84, 9);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(84, 33);
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:84:33: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if (((LA1_0>='0' && LA1_0<='9')||(LA1_0>='A' && LA1_0<='Z')||LA1_0=='_'||(LA1_0>='a' && LA1_0<='z')))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:
					{
					DebugLocation(84, 33);
					input.Consume();


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ID", 15);
			LeaveRule("ID", 15);
			LeaveRule_ID();
		}
	}
	// $ANTLR end "ID"

	partial void EnterRule_INT();
	partial void LeaveRule_INT();

	// $ANTLR start "INT"
	[GrammarRule("INT")]
	private void mINT()
	{
		EnterRule_INT();
		EnterRule("INT", 16);
		TraceIn("INT", 16);
		try
		{
			int _type = INT;
			int _channel = DefaultTokenChannel;
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:86:5: ( ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:86:9: ( '0' .. '9' )+
			{
			DebugLocation(86, 9);
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:86:9: ( '0' .. '9' )+
			int cnt2=0;
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if (((LA2_0>='0' && LA2_0<='9')))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:
					{
					DebugLocation(86, 9);
					input.Consume();


					}
					break;

				default:
					if (cnt2 >= 1)
						goto loop2;

					EarlyExitException eee2 = new EarlyExitException( 2, input );
					DebugRecognitionException(eee2);
					throw eee2;
				}
				cnt2++;
			}
			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INT", 16);
			LeaveRule("INT", 16);
			LeaveRule_INT();
		}
	}
	// $ANTLR end "INT"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 17);
		TraceIn("WS", 17);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:88:5: ( ( ' ' | '\\t' | '\\r' | '\\n' )+ )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:88:9: ( ' ' | '\\t' | '\\r' | '\\n' )+
			{
			DebugLocation(88, 9);
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:88:9: ( ' ' | '\\t' | '\\r' | '\\n' )+
			int cnt3=0;
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if (((LA3_0>='\t' && LA3_0<='\n')||LA3_0=='\r'||LA3_0==' '))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:
					{
					DebugLocation(88, 9);
					input.Consume();


					}
					break;

				default:
					if (cnt3 >= 1)
						goto loop3;

					EarlyExitException eee3 = new EarlyExitException( 3, input );
					DebugRecognitionException(eee3);
					throw eee3;
				}
				cnt3++;
			}
			loop3:
				;

			} finally { DebugExitSubRule(3); }

			DebugLocation(88, 39);
			 _channel = Hidden; 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 17);
			LeaveRule("WS", 17);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	public override void mTokens()
	{
		// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:1:8: ( T__11 | T__12 | T__13 | T__14 | T__15 | T__16 | T__17 | T__18 | T__19 | T__20 | T__21 | T__22 | T__23 | T__24 | ID | INT | WS )
		int alt4=17;
		try { DebugEnterDecision(4, false);
		switch (input.LA(1))
		{
		case '!':
			{
			alt4 = 1;
			}
			break;
		case '(':
			{
			alt4 = 2;
			}
			break;
		case ')':
			{
			alt4 = 3;
			}
			break;
		case '*':
			{
			alt4 = 4;
			}
			break;
		case '+':
			{
			alt4 = 5;
			}
			break;
		case ',':
			{
			alt4 = 6;
			}
			break;
		case ';':
			{
			alt4 = 7;
			}
			break;
		case '=':
			{
			int LA4_8 = input.LA(2);

			if ((LA4_8=='='))
			{
				alt4 = 9;
			}
			else
			{
				alt4 = 8;
			}
			}
			break;
		case 'c':
			{
			int LA4_9 = input.LA(2);

			if ((LA4_9=='h'))
			{
				int LA4_19 = input.LA(3);

				if ((LA4_19=='a'))
				{
					int LA4_22 = input.LA(4);

					if ((LA4_22=='r'))
					{
						int LA4_25 = input.LA(5);

						if (((LA4_25>='0' && LA4_25<='9')||(LA4_25>='A' && LA4_25<='Z')||LA4_25=='_'||(LA4_25>='a' && LA4_25<='z')))
						{
							alt4 = 15;
						}
						else
						{
							alt4 = 10;
						}
					}
					else
					{
						alt4 = 15;
					}
				}
				else
				{
					alt4 = 15;
				}
			}
			else
			{
				alt4 = 15;
			}
			}
			break;
		case 'f':
			{
			int LA4_10 = input.LA(2);

			if ((LA4_10=='o'))
			{
				int LA4_20 = input.LA(3);

				if ((LA4_20=='r'))
				{
					int LA4_23 = input.LA(4);

					if (((LA4_23>='0' && LA4_23<='9')||(LA4_23>='A' && LA4_23<='Z')||LA4_23=='_'||(LA4_23>='a' && LA4_23<='z')))
					{
						alt4 = 15;
					}
					else
					{
						alt4 = 11;
					}
				}
				else
				{
					alt4 = 15;
				}
			}
			else
			{
				alt4 = 15;
			}
			}
			break;
		case 'i':
			{
			int LA4_11 = input.LA(2);

			if ((LA4_11=='n'))
			{
				int LA4_21 = input.LA(3);

				if ((LA4_21=='t'))
				{
					int LA4_24 = input.LA(4);

					if (((LA4_24>='0' && LA4_24<='9')||(LA4_24>='A' && LA4_24<='Z')||LA4_24=='_'||(LA4_24>='a' && LA4_24<='z')))
					{
						alt4 = 15;
					}
					else
					{
						alt4 = 12;
					}
				}
				else
				{
					alt4 = 15;
				}
			}
			else
			{
				alt4 = 15;
			}
			}
			break;
		case '{':
			{
			alt4 = 13;
			}
			break;
		case '}':
			{
			alt4 = 14;
			}
			break;
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'd':
		case 'e':
		case 'g':
		case 'h':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z':
			{
			alt4 = 15;
			}
			break;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			{
			alt4 = 16;
			}
			break;
		case '\t':
		case '\n':
		case '\r':
		case ' ':
			{
			alt4 = 17;
			}
			break;
		default:
			{
				NoViableAltException nvae = new NoViableAltException("", 4, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
		}

		} finally { DebugExitDecision(4); }
		switch (alt4)
		{
		case 1:
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:1:10: T__11
			{
			DebugLocation(1, 10);
			mT__11(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:1:16: T__12
			{
			DebugLocation(1, 16);
			mT__12(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:1:22: T__13
			{
			DebugLocation(1, 22);
			mT__13(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:1:28: T__14
			{
			DebugLocation(1, 28);
			mT__14(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:1:34: T__15
			{
			DebugLocation(1, 34);
			mT__15(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:1:40: T__16
			{
			DebugLocation(1, 40);
			mT__16(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:1:46: T__17
			{
			DebugLocation(1, 46);
			mT__17(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:1:52: T__18
			{
			DebugLocation(1, 52);
			mT__18(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:1:58: T__19
			{
			DebugLocation(1, 58);
			mT__19(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:1:64: T__20
			{
			DebugLocation(1, 64);
			mT__20(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:1:70: T__21
			{
			DebugLocation(1, 70);
			mT__21(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:1:76: T__22
			{
			DebugLocation(1, 76);
			mT__22(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:1:82: T__23
			{
			DebugLocation(1, 82);
			mT__23(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:1:88: T__24
			{
			DebugLocation(1, 88);
			mT__24(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:1:94: ID
			{
			DebugLocation(1, 94);
			mID(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:1:97: INT
			{
			DebugLocation(1, 97);
			mINT(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinus.g:1:101: WS
			{
			DebugLocation(1, 101);
			mWS(); 

			}
			break;

		}

	}


	#region DFA

	protected override void InitDFAs()
	{
		base.InitDFAs();
	}

 
	#endregion

}
