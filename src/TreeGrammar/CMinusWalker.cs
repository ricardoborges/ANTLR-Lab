//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinusWalker.g 2012-03-07 22:52:00

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class CMinusWalker : Antlr.Runtime.Tree.TreeParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ARG", "FUNC", "ID", "INT", "SLIST", "VAR", "WS", "'!='", "'('", "')'", "'*'", "'+'", "','", "';'", "'='", "'=='", "'char'", "'for'", "'int'", "'{'", "'}'"
	};
	public const int EOF=-1;
	public const int T__11=11;
	public const int T__12=12;
	public const int T__13=13;
	public const int T__14=14;
	public const int T__15=15;
	public const int T__16=16;
	public const int T__17=17;
	public const int T__18=18;
	public const int T__19=19;
	public const int T__20=20;
	public const int T__21=21;
	public const int T__22=22;
	public const int T__23=23;
	public const int T__24=24;
	public const int ARG=4;
	public const int FUNC=5;
	public const int ID=6;
	public const int INT=7;
	public const int SLIST=8;
	public const int VAR=9;
	public const int WS=10;

	public CMinusWalker(ITreeNodeStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public CMinusWalker(ITreeNodeStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return CMinusWalker.tokenNames; } }
	public override string GrammarFileName { get { return "E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinusWalker.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_program();
	partial void LeaveRule_program();

	// $ANTLR start "program"
	// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinusWalker.g:16:8: public program : ( declaration )+ ;
	[GrammarRule("program")]
	public void program()
	{
		EnterRule_program();
		EnterRule("program", 1);
		TraceIn("program", 1);
		try { DebugEnterRule(GrammarFileName, "program");
		DebugLocation(16, 4);
		try
		{
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinusWalker.g:17:5: ( ( declaration )+ )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinusWalker.g:17:9: ( declaration )+
			{
			DebugLocation(17, 9);
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinusWalker.g:17:9: ( declaration )+
			int cnt1=0;
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==FUNC||LA1_0==VAR))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinusWalker.g:17:9: declaration
					{
					DebugLocation(17, 9);
					PushFollow(Follow._declaration_in_program74);
					declaration();
					PopFollow();


					}
					break;

				default:
					if (cnt1 >= 1)
						goto loop1;

					EarlyExitException eee1 = new EarlyExitException( 1, input );
					DebugRecognitionException(eee1);
					throw eee1;
				}
				cnt1++;
			}
			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("program", 1);
			LeaveRule("program", 1);
			LeaveRule_program();
		}
		DebugLocation(18, 4);
		} finally { DebugExitRule(GrammarFileName, "program"); }
		return;

	}
	// $ANTLR end "program"

	partial void EnterRule_declaration();
	partial void LeaveRule_declaration();

	// $ANTLR start "declaration"
	// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinusWalker.g:20:1: declaration : ( variable | function );
	[GrammarRule("declaration")]
	private void declaration()
	{
		EnterRule_declaration();
		EnterRule("declaration", 2);
		TraceIn("declaration", 2);
		try { DebugEnterRule(GrammarFileName, "declaration");
		DebugLocation(20, 4);
		try
		{
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinusWalker.g:21:5: ( variable | function )
			int alt2=2;
			try { DebugEnterDecision(2, false);
			int LA2_0 = input.LA(1);

			if ((LA2_0==VAR))
			{
				alt2 = 1;
			}
			else if ((LA2_0==FUNC))
			{
				alt2 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 2, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinusWalker.g:21:9: variable
				{
				DebugLocation(21, 9);
				PushFollow(Follow._variable_in_declaration94);
				variable();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinusWalker.g:22:9: function
				{
				DebugLocation(22, 9);
				PushFollow(Follow._function_in_declaration104);
				function();
				PopFollow();


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("declaration", 2);
			LeaveRule("declaration", 2);
			LeaveRule_declaration();
		}
		DebugLocation(23, 4);
		} finally { DebugExitRule(GrammarFileName, "declaration"); }
		return;

	}
	// $ANTLR end "declaration"

	partial void EnterRule_variable();
	partial void LeaveRule_variable();

	// $ANTLR start "variable"
	// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinusWalker.g:25:1: variable : ^( VAR type ID ) ;
	[GrammarRule("variable")]
	private void variable()
	{
		EnterRule_variable();
		EnterRule("variable", 3);
		TraceIn("variable", 3);
		CommonTree ID2 = default(CommonTree);
		TreeRuleReturnScope<CommonTree> type1 = default(TreeRuleReturnScope<CommonTree>);

		try { DebugEnterRule(GrammarFileName, "variable");
		DebugLocation(25, 4);
		try
		{
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinusWalker.g:26:5: ( ^( VAR type ID ) )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinusWalker.g:26:9: ^( VAR type ID )
			{
			DebugLocation(26, 9);
			DebugLocation(26, 11);
			Match(input,VAR,Follow._VAR_in_variable124); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(26, 15);
			PushFollow(Follow._type_in_variable126);
			type1=type();
			PopFollow();

			DebugLocation(26, 20);
			ID2=(CommonTree)Match(input,ID,Follow._ID_in_variable128); 

			Match(input, TokenTypes.Up, null); 

			DebugLocation(27, 2);
			System.Console.Out.WriteLine(string.Format("Define {0} {1}",(type1!=null?(input.TokenStream.ToString(input.TreeAdaptor.GetTokenStartIndex(type1.Start),input.TreeAdaptor.GetTokenStopIndex(type1.Start))):null), (ID2!=null?ID2.Text:null)));

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("variable", 3);
			LeaveRule("variable", 3);
			LeaveRule_variable();
		}
		DebugLocation(28, 4);
		} finally { DebugExitRule(GrammarFileName, "variable"); }
		return;

	}
	// $ANTLR end "variable"

	partial void EnterRule_type();
	partial void LeaveRule_type();

	// $ANTLR start "type"
	// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinusWalker.g:30:1: type : ( 'int' | 'char' );
	[GrammarRule("type")]
	private TreeRuleReturnScope<CommonTree> type()
	{
		EnterRule_type();
		EnterRule("type", 4);
		TraceIn("type", 4);
		TreeRuleReturnScope<CommonTree> retval = new TreeRuleReturnScope<CommonTree>();
		retval.Start = (CommonTree)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "type");
		DebugLocation(30, 4);
		try
		{
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinusWalker.g:30:5: ( 'int' | 'char' )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinusWalker.g:
			{
			DebugLocation(30, 5);
			if (input.LA(1)==20||input.LA(1)==22)
			{
				input.Consume();
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type", 4);
			LeaveRule("type", 4);
			LeaveRule_type();
		}
		DebugLocation(32, 4);
		} finally { DebugExitRule(GrammarFileName, "type"); }
		return retval;

	}
	// $ANTLR end "type"

	partial void EnterRule_function();
	partial void LeaveRule_function();

	// $ANTLR start "function"
	// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinusWalker.g:34:1: function : ^( FUNC type ID ( formalParameter )* block ) ;
	[GrammarRule("function")]
	private void function()
	{
		EnterRule_function();
		EnterRule("function", 5);
		TraceIn("function", 5);
		CommonTree ID4 = default(CommonTree);
		TreeRuleReturnScope<CommonTree> type3 = default(TreeRuleReturnScope<CommonTree>);

		try { DebugEnterRule(GrammarFileName, "function");
		DebugLocation(34, 4);
		try
		{
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinusWalker.g:35:5: ( ^( FUNC type ID ( formalParameter )* block ) )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinusWalker.g:35:9: ^( FUNC type ID ( formalParameter )* block )
			{
			DebugLocation(35, 9);
			DebugLocation(35, 11);
			Match(input,FUNC,Follow._FUNC_in_function177); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(35, 16);
			PushFollow(Follow._type_in_function179);
			type3=type();
			PopFollow();

			DebugLocation(35, 21);
			ID4=(CommonTree)Match(input,ID,Follow._ID_in_function181); 
			DebugLocation(35, 24);
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinusWalker.g:35:24: ( formalParameter )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==ARG))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinusWalker.g:35:24: formalParameter
					{
					DebugLocation(35, 24);
					PushFollow(Follow._formalParameter_in_function183);
					formalParameter();
					PopFollow();


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }

			DebugLocation(35, 41);
			PushFollow(Follow._block_in_function186);
			block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(36, 6);
			System.Console.Out.WriteLine(string.Format("Define {0} {1}()",(type3!=null?(input.TokenStream.ToString(input.TreeAdaptor.GetTokenStartIndex(type3.Start),input.TreeAdaptor.GetTokenStopIndex(type3.Start))):null), (ID4!=null?ID4.Text:null)));

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("function", 5);
			LeaveRule("function", 5);
			LeaveRule_function();
		}
		DebugLocation(37, 4);
		} finally { DebugExitRule(GrammarFileName, "function"); }
		return;

	}
	// $ANTLR end "function"

	partial void EnterRule_formalParameter();
	partial void LeaveRule_formalParameter();

	// $ANTLR start "formalParameter"
	// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinusWalker.g:39:1: formalParameter : ^( ARG type ID ) ;
	[GrammarRule("formalParameter")]
	private void formalParameter()
	{
		EnterRule_formalParameter();
		EnterRule("formalParameter", 6);
		TraceIn("formalParameter", 6);
		try { DebugEnterRule(GrammarFileName, "formalParameter");
		DebugLocation(39, 4);
		try
		{
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinusWalker.g:40:5: ( ^( ARG type ID ) )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinusWalker.g:40:9: ^( ARG type ID )
			{
			DebugLocation(40, 9);
			DebugLocation(40, 11);
			Match(input,ARG,Follow._ARG_in_formalParameter214); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(40, 15);
			PushFollow(Follow._type_in_formalParameter216);
			type();
			PopFollow();

			DebugLocation(40, 20);
			Match(input,ID,Follow._ID_in_formalParameter218); 

			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("formalParameter", 6);
			LeaveRule("formalParameter", 6);
			LeaveRule_formalParameter();
		}
		DebugLocation(41, 4);
		} finally { DebugExitRule(GrammarFileName, "formalParameter"); }
		return;

	}
	// $ANTLR end "formalParameter"

	partial void EnterRule_block();
	partial void LeaveRule_block();

	// $ANTLR start "block"
	// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinusWalker.g:44:1: block : ^( SLIST ( variable )* ( stat )* ) ;
	[GrammarRule("block")]
	private void block()
	{
		EnterRule_block();
		EnterRule("block", 7);
		TraceIn("block", 7);
		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(44, 4);
		try
		{
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinusWalker.g:45:5: ( ^( SLIST ( variable )* ( stat )* ) )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinusWalker.g:45:9: ^( SLIST ( variable )* ( stat )* )
			{
			DebugLocation(45, 9);
			DebugLocation(45, 11);
			Match(input,SLIST,Follow._SLIST_in_block240); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(45, 17);
				// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinusWalker.g:45:17: ( variable )*
				try { DebugEnterSubRule(4);
				while (true)
				{
					int alt4=2;
					try { DebugEnterDecision(4, false);
					int LA4_0 = input.LA(1);

					if ((LA4_0==VAR))
					{
						alt4 = 1;
					}


					} finally { DebugExitDecision(4); }
					switch ( alt4 )
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinusWalker.g:45:17: variable
						{
						DebugLocation(45, 17);
						PushFollow(Follow._variable_in_block242);
						variable();
						PopFollow();


						}
						break;

					default:
						goto loop4;
					}
				}

				loop4:
					;

				} finally { DebugExitSubRule(4); }

				DebugLocation(45, 27);
				// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinusWalker.g:45:27: ( stat )*
				try { DebugEnterSubRule(5);
				while (true)
				{
					int alt5=2;
					try { DebugEnterDecision(5, false);
					int LA5_0 = input.LA(1);

					if (((LA5_0>=ID && LA5_0<=SLIST)||LA5_0==11||(LA5_0>=14 && LA5_0<=15)||(LA5_0>=18 && LA5_0<=19)||LA5_0==21))
					{
						alt5 = 1;
					}


					} finally { DebugExitDecision(5); }
					switch ( alt5 )
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinusWalker.g:45:27: stat
						{
						DebugLocation(45, 27);
						PushFollow(Follow._stat_in_block245);
						stat();
						PopFollow();


						}
						break;

					default:
						goto loop5;
					}
				}

				loop5:
					;

				} finally { DebugExitSubRule(5); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("block", 7);
			LeaveRule("block", 7);
			LeaveRule_block();
		}
		DebugLocation(46, 4);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		return;

	}
	// $ANTLR end "block"

	partial void EnterRule_stat();
	partial void LeaveRule_stat();

	// $ANTLR start "stat"
	// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinusWalker.g:48:1: stat : ( forStat | expr | block | assignStat );
	[GrammarRule("stat")]
	private void stat()
	{
		EnterRule_stat();
		EnterRule("stat", 8);
		TraceIn("stat", 8);
		try { DebugEnterRule(GrammarFileName, "stat");
		DebugLocation(48, 4);
		try
		{
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinusWalker.g:48:5: ( forStat | expr | block | assignStat )
			int alt6=4;
			try { DebugEnterDecision(6, false);
			switch (input.LA(1))
			{
			case 21:
				{
				alt6 = 1;
				}
				break;
			case ID:
			case INT:
			case 11:
			case 14:
			case 15:
			case 19:
				{
				alt6 = 2;
				}
				break;
			case SLIST:
				{
				alt6 = 3;
				}
				break;
			case 18:
				{
				alt6 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 6, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinusWalker.g:48:7: forStat
				{
				DebugLocation(48, 7);
				PushFollow(Follow._forStat_in_stat259);
				forStat();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinusWalker.g:49:7: expr
				{
				DebugLocation(49, 7);
				PushFollow(Follow._expr_in_stat267);
				expr();
				PopFollow();


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinusWalker.g:50:7: block
				{
				DebugLocation(50, 7);
				PushFollow(Follow._block_in_stat275);
				block();
				PopFollow();


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinusWalker.g:51:7: assignStat
				{
				DebugLocation(51, 7);
				PushFollow(Follow._assignStat_in_stat283);
				assignStat();
				PopFollow();


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stat", 8);
			LeaveRule("stat", 8);
			LeaveRule_stat();
		}
		DebugLocation(52, 4);
		} finally { DebugExitRule(GrammarFileName, "stat"); }
		return;

	}
	// $ANTLR end "stat"

	partial void EnterRule_forStat();
	partial void LeaveRule_forStat();

	// $ANTLR start "forStat"
	// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinusWalker.g:54:1: forStat : ^( 'for' assignStat expr assignStat block ) ;
	[GrammarRule("forStat")]
	private void forStat()
	{
		EnterRule_forStat();
		EnterRule("forStat", 9);
		TraceIn("forStat", 9);
		try { DebugEnterRule(GrammarFileName, "forStat");
		DebugLocation(54, 4);
		try
		{
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinusWalker.g:55:5: ( ^( 'for' assignStat expr assignStat block ) )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinusWalker.g:55:9: ^( 'for' assignStat expr assignStat block )
			{
			DebugLocation(55, 9);
			DebugLocation(55, 11);
			Match(input,21,Follow._21_in_forStat303); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(55, 17);
			PushFollow(Follow._assignStat_in_forStat305);
			assignStat();
			PopFollow();

			DebugLocation(55, 28);
			PushFollow(Follow._expr_in_forStat307);
			expr();
			PopFollow();

			DebugLocation(55, 33);
			PushFollow(Follow._assignStat_in_forStat309);
			assignStat();
			PopFollow();

			DebugLocation(55, 44);
			PushFollow(Follow._block_in_forStat311);
			block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("forStat", 9);
			LeaveRule("forStat", 9);
			LeaveRule_forStat();
		}
		DebugLocation(56, 4);
		} finally { DebugExitRule(GrammarFileName, "forStat"); }
		return;

	}
	// $ANTLR end "forStat"

	partial void EnterRule_assignStat();
	partial void LeaveRule_assignStat();

	// $ANTLR start "assignStat"
	// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinusWalker.g:58:1: assignStat : ^( '=' ID expr ) ;
	[GrammarRule("assignStat")]
	private void assignStat()
	{
		EnterRule_assignStat();
		EnterRule("assignStat", 10);
		TraceIn("assignStat", 10);
		try { DebugEnterRule(GrammarFileName, "assignStat");
		DebugLocation(58, 4);
		try
		{
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinusWalker.g:59:5: ( ^( '=' ID expr ) )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinusWalker.g:59:9: ^( '=' ID expr )
			{
			DebugLocation(59, 9);
			DebugLocation(59, 11);
			Match(input,18,Follow._18_in_assignStat332); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(59, 15);
			Match(input,ID,Follow._ID_in_assignStat334); 
			DebugLocation(59, 18);
			PushFollow(Follow._expr_in_assignStat336);
			expr();
			PopFollow();


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("assignStat", 10);
			LeaveRule("assignStat", 10);
			LeaveRule_assignStat();
		}
		DebugLocation(60, 4);
		} finally { DebugExitRule(GrammarFileName, "assignStat"); }
		return;

	}
	// $ANTLR end "assignStat"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinusWalker.g:62:1: expr : ( ^( '==' expr expr ) | ^( '!=' expr expr ) | ^( '+' expr expr ) | ^( '*' expr expr ) | ID | INT );
	[GrammarRule("expr")]
	private void expr()
	{
		EnterRule_expr();
		EnterRule("expr", 11);
		TraceIn("expr", 11);
		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(62, 0);
		try
		{
			// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinusWalker.g:62:5: ( ^( '==' expr expr ) | ^( '!=' expr expr ) | ^( '+' expr expr ) | ^( '*' expr expr ) | ID | INT )
			int alt7=6;
			try { DebugEnterDecision(7, false);
			switch (input.LA(1))
			{
			case 19:
				{
				alt7 = 1;
				}
				break;
			case 11:
				{
				alt7 = 2;
				}
				break;
			case 15:
				{
				alt7 = 3;
				}
				break;
			case 14:
				{
				alt7 = 4;
				}
				break;
			case ID:
				{
				alt7 = 5;
				}
				break;
			case INT:
				{
				alt7 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 7, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinusWalker.g:62:7: ^( '==' expr expr )
				{
				DebugLocation(62, 7);
				DebugLocation(62, 9);
				Match(input,19,Follow._19_in_expr350); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(62, 14);
				PushFollow(Follow._expr_in_expr352);
				expr();
				PopFollow();

				DebugLocation(62, 19);
				PushFollow(Follow._expr_in_expr354);
				expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinusWalker.g:63:3: ^( '!=' expr expr )
				{
				DebugLocation(63, 3);
				DebugLocation(63, 5);
				Match(input,11,Follow._11_in_expr360); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(63, 10);
				PushFollow(Follow._expr_in_expr362);
				expr();
				PopFollow();

				DebugLocation(63, 15);
				PushFollow(Follow._expr_in_expr364);
				expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinusWalker.g:64:3: ^( '+' expr expr )
				{
				DebugLocation(64, 3);
				DebugLocation(64, 5);
				Match(input,15,Follow._15_in_expr370); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(64, 9);
				PushFollow(Follow._expr_in_expr372);
				expr();
				PopFollow();

				DebugLocation(64, 14);
				PushFollow(Follow._expr_in_expr374);
				expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinusWalker.g:65:3: ^( '*' expr expr )
				{
				DebugLocation(65, 3);
				DebugLocation(65, 5);
				Match(input,14,Follow._14_in_expr380); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(65, 9);
				PushFollow(Follow._expr_in_expr382);
				expr();
				PopFollow();

				DebugLocation(65, 14);
				PushFollow(Follow._expr_in_expr384);
				expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinusWalker.g:66:3: ID
				{
				DebugLocation(66, 3);
				Match(input,ID,Follow._ID_in_expr389); 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// E:\\Dev\\Git\\ANTLR-Lab\\src\\TreeGrammar\\CMinusWalker.g:67:3: INT
				{
				DebugLocation(67, 3);
				Match(input,INT,Follow._INT_in_expr393); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr", 11);
			LeaveRule("expr", 11);
			LeaveRule_expr();
		}
		DebugLocation(68, 0);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return;

	}
	// $ANTLR end "expr"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _declaration_in_program74 = new BitSet(new ulong[]{0x222UL});
		public static readonly BitSet _variable_in_declaration94 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _function_in_declaration104 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VAR_in_variable124 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_in_variable126 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _ID_in_variable128 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _FUNC_in_function177 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_in_function179 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _ID_in_function181 = new BitSet(new ulong[]{0x110UL});
		public static readonly BitSet _formalParameter_in_function183 = new BitSet(new ulong[]{0x110UL});
		public static readonly BitSet _block_in_function186 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ARG_in_formalParameter214 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_in_formalParameter216 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _ID_in_formalParameter218 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SLIST_in_block240 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _variable_in_block242 = new BitSet(new ulong[]{0x2CCBC8UL});
		public static readonly BitSet _stat_in_block245 = new BitSet(new ulong[]{0x2CC9C8UL});
		public static readonly BitSet _forStat_in_stat259 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_stat267 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_stat275 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignStat_in_stat283 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _21_in_forStat303 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _assignStat_in_forStat305 = new BitSet(new ulong[]{0x8C8C0UL});
		public static readonly BitSet _expr_in_forStat307 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _assignStat_in_forStat309 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _block_in_forStat311 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _18_in_assignStat332 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_assignStat334 = new BitSet(new ulong[]{0x8C8C0UL});
		public static readonly BitSet _expr_in_assignStat336 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _19_in_expr350 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr352 = new BitSet(new ulong[]{0x8C8C0UL});
		public static readonly BitSet _expr_in_expr354 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _11_in_expr360 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr362 = new BitSet(new ulong[]{0x8C8C0UL});
		public static readonly BitSet _expr_in_expr364 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _15_in_expr370 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr372 = new BitSet(new ulong[]{0x8C8C0UL});
		public static readonly BitSet _expr_in_expr374 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _14_in_expr380 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr382 = new BitSet(new ulong[]{0x8C8C0UL});
		public static readonly BitSet _expr_in_expr384 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ID_in_expr389 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INT_in_expr393 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}
